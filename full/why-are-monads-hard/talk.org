#+REVEAL_ROOT: ../../lib/reveal.js-3.0.0/
#+REVEAL_HLEVEL: 3
#+REVEAL_TRANS: linear
#+REVEAL_EXTRA_CSS: ./talk.css

#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h2>%a</h2>"
#+OPTIONS: toc:nil
#+OPTIONS: num:nil

#+MACRO: color @@html:<font color="$1">$2</font>@@



#+Title: Why are monads hard?
#+Author: Jake Woods

# Solarized palette from http://ethanschoonover.com/solarized
# used as reference for digraph
# YELLOW = '#b58900'
# ORANGE = '#cb4b16'
# VIOLET = '#6c71c4'
# RED = '#dc323f'
# BLUE = '#268bd2'
# MAGENTA = '#d33682'
# CYAN = '#2aa198'
# GREEN = '#859900'
# GREY = '#939393'

#+NAME: digraph-settings
#+BEGIN_SRC dot :noweb yes :exports none
  rankdir=LR;
  splines=true;
  bgcolor="transparent";
  graph[dpi=140];
  node [fontsize=38 shape=box fontname="Hack" color="#859900" fontcolor="#859900"];
  edge [fontsize=28 color="#268bd2" fontname="Hack" fontcolor="#268bd2" ]
#+END_SRC

* What's this talk about?
#+ATTR_REVEAL: :frag (appear)
Monads!

#+ATTR_REVEAL: :frag (appear)
Impossible to explain!

#+ATTR_REVEAL: :frag (appear)
... I'm {{{color(red, not)}}} going to teach you how to use them.

#+ATTR_REVEAL: :frag (appear)
Instead we're going to figure out why they're so hard to learn.

#+ATTR_REVEAL: :frag (appear)
And _maybe_ help you get started.

* So why are they so hard?

** Monad is an overloaded term

** It refers to _lots_ of concepts

** It's like trying to learn "Science"

  #+ATTR_REVEAL: :frag (appear)
  You need to learn it bit-by-bit

* Let's look at some Monads

** A "Container" type?
   #+BEGIN_SRC c++
   // Java-ish
   List<String>     // Contains many strings
   Optional<String> // Contains a string or nothing
   Future<String>   // Contains a value from the future
   #+END_SRC

   #+BEGIN_SRC scala
   // Scala
   List[String]     // Contains many strings
   Optional[String] // Contains a string or nothing
   Future[String]   // Contains a value from the future
   #+END_SRC

   #+BEGIN_SRC haskell
   -- Haskell
   List String   -- Contains many strings
   Maybe String  -- Contains a string or nothing
   Async String  -- Contains a value from the future
   #+END_SRC

** A generic type!

   #+BEGIN_SRC c++
   // Java-ish
   Monad<A>
   #+END_SRC

   #+BEGIN_SRC scala
   // Scala
   Monad[A]
   #+END_SRC

   #+BEGIN_SRC haskell
   -- Haskell
   Monad a
   #+END_SRC

*** Example

   #+BEGIN_SRC c++
   // Java-ish
   Integer     // Definitely not a Monad
   List<A>     // Could be a Monad
   Optional<A> // Could be a Monad
   #+END_SRC

   #+BEGIN_SRC scala
   // Scala
   Int         // Definitely not a Monad
   List[A]     // Could be a Monad
   Optional[A] // Could be a Monad
   #+END_SRC

   #+BEGIN_SRC haskell
   -- Haskell
   Int         -- Definitely not a Monad
   List a      -- Could be a Monad
   Optional a  -- Could be a Monad
   #+END_SRC

** A type with ~pure~

    #+BEGIN_SRC c++
    // Java-ish
    interface Monad<A> {
      static Monad<A> pure(A a);
    }
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    def pure(a: A): Monad[A]
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    pure :: (Monad m) => a -> m a
    #+END_SRC

*** It works on Lists!

    #+BEGIN_SRC c++
    // Java-ish
    List.pure("Hello") == List.of("Hello");
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    List.pure("Hello") == List("Hello")
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    pure "Hello" :: List String == ["Hello"]
    #+END_SRC

*** And Optionals!
    #+BEGIN_SRC c++
    // Java-ish
    Optional.pure("Hello") == Optional.of("Hello");
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    Option.pure("Hello") == Some("Hello")
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    pure "Hello" :: Maybe String == Just "Hello"
    #+END_SRC

*** And Future!
    #+BEGIN_SRC c++
    // Java-ish
    Future.pure("Hello") == Future.completedFuture("Hello");
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    Future.pure("Hello") == Future.successful("Hello")
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    pure "Hello" :: Async String == CompletedFuture "Hello"
    #+END_SRC

*** Same interface, different implementation

  #+BEGIN_SRC dot :noweb yes :file pure_visual_example_concrete.png :cmdline -Kdot -Tpng
    digraph {
      <<digraph-settings>>

      a [label="A"]
      list_of_a [label="List[A]"]
      maybe_of_a [label="Maybe[A]"]
      future_of_a [label="Future[A]"]

      a -> list_of_a [label="List.pure"]
      a -> maybe_of_a [label="Maybe.pure"]
      a -> future_of_a [label="\nFuture.pure"]
    }
  #+END_SRC

  #+RESULTS:
  [[file:pure_visual_example_concrete.png]]

*** Generalised

  #+BEGIN_SRC dot :noweb yes :file pure_visual_example_abstract.png :cmdline -Kdot -Tpng
    digraph {
      <<digraph-settings>>

      a [label="A"]
      ma [label="M[A]"]

      a -> ma [label="pure"]
    }
  #+END_SRC

  #+RESULTS:
  [[file:pure_visual_example_abstract.png]]

** A type with ~flatten~
  A.k.a ~join~ or ~concat~

    #+BEGIN_SRC c++
    // Java-ish
    Monad<A> flatten(Monad<Monad<A>> a);
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    def flatten(a: Monad[Monad[A]]): Monad[A]
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    concat :: (Monad m) => m (m a) -> m a
    #+END_SRC

*** Like Lists
    #+BEGIN_SRC c++
    // Java-ish
    List.of(List.of(1,1), List.of(2,2)).flatten
      == List.of(1,1,2,2);
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    List(List(1,1), List(2,2)).flatten == List(1,1,2,2);
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    concat [[1,1],[2,2]] == [1,1,2,2]
    #+END_SRC

*** Or Optionals!
    #+BEGIN_SRC c++
    // Java-ish
    Optional.of(Optional.of("Hi")).flatten
      == Optional.of("Hi");
    Optional.of(Optional.empty).flatten
      == Optional.empty;
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    Some(Some("Hi")).flatten == Some("Hi")
    Some(None).flatten == None
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    concat Just (Just "Hi") == Just "Hi"
    concat Just Nothing == Nothing
    #+END_SRC

*** Or Futures
    #+BEGIN_SRC c++
    // Java-ish
    Future.of(Future.of("Hello")).flatten
      == Future.of("Hello");
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    Future.successful(Future.successful("Hello")).flatten
      == Future.successful("Hello")
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    concat (Async (Async "Hello")) :: Async (Async String)
      == (Async "Hello")
    #+END_SRC

*** Same interface, different implementation
    #+BEGIN_SRC dot :noweb yes :file flatten_example_concrete.png :cmdline -Kdot -Tpng
      digraph {
        <<digraph-settings>>

        result [label="List[A]"]
        listOfList [label="List[List[A]]"]

        result -> listOfList [label="flatten" dir=back]
      }
    #+END_SRC

    #+RESULTS:
    [[file:flatten_example_concrete.png]]

*** Generalised

    #+BEGIN_SRC dot :noweb yes :file flatten_example_abstract.png :cmdline -Kdot -Tpng
      digraph {
        <<digraph-settings>>

        result [label="M[A]"]
        listOfList [label="M[M[A]]"]

        result -> listOfList [label="flatten" dir=back]
      }
    #+END_SRC

    #+RESULTS:
    [[file:flatten_example_abstract.png]]

** A type that can be nested

    #+BEGIN_SRC dot :noweb yes :file nesting_example.png :cmdline -Kdot -Tpng
      digraph {
        <<digraph-settings>>

        result [label="M[A]"]
        listOfList [label="M[M[A]]"]

        result -> listOfList [label="flatten" dir=back]
        result -> listOfList [label="pure"]
      }
    #+END_SRC

** A type that can be arbitrarily nested

  #+BEGIN_SRC dot :noweb yes :file nesting_example_pure_and_flatten.png :cmdline -Kdot -Tpng
    digraph {
      <<digraph-settings>>

      a [label="A"]
      ma [label="M[A]"]
      mma [label="M[M[A]]"]
      mmma [label="..."]

      a -> ma [label="pure"]

      ma -> mma [label="pure"]
      ma -> mma [label="flatten" dir=back]

      mma -> mmma [label = "pure"]
      mma -> mmma [label = "flatten" dir=back]
    }
  #+END_SRC

  #+RESULTS:
  [[file:nesting_example_pure_and_flatten.png]]

** A type with ~flatMap~

   Also known as ~bind~ or ~>>=~

    #+BEGIN_SRC c++
    // Java-ish
    interface Monad<A> {
      Monad<B> flatMap(Function<A, Monad,B>> fn);
    }
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    trait Monad[A] {
      Monad[B] flatMap(fn: A => Monad[B]): Monad[B]
    }
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    bind :: (Monad m) => m a -> (a -> m b) -> m b
    #+END_SRC

*** Example

    #+BEGIN_SRC javascript
    [1,2,3].flatMap(a => [a, a])
    // Returns [1,1,2,2,3,3]

    Maybe(1).flatMap(value => Some(value+2))
    // Returns Maybe(3)

    Maybe(1).flatMap(value => None)
    // Returns None
    #+END_SRC

*** flatMap using map and flatten
    #+BEGIN_SRC dot :noweb yes :file list_flatMap_example.png :cmdline -Kdot -Tpng
      digraph {
        <<digraph-settings>>

        list       [label="[1,2,3]"]
        listOfList [label="[[1,1], [2, 2], [3, 3]]"]
        result     [label="[1,1,2,2,3,3]"]

        list -> listOfList [label="map(x => [x, x])"]
        listOfList -> result [label="flatten"]
        list -> result [label="flatMap(x => [x, x])"]
      }
    #+END_SRC

    #+RESULTS:
    [[file:list_flatMap_example.png]]

*** Generalised
    #+BEGIN_SRC dot :noweb yes :file flatmap.png :cmdline -Kdot -Tpng
      digraph {
        <<digraph-settings>>

        ma [label="M[A]"]
        mmb [label="M[M[B]]"]
        mb [label="M[B]"]

        ma -> mmb [label="map(A => M[B])"]
        mmb -> mb [label="flatten"]
        ma -> mb [label="flatMap(A => M[B])"]
      }
    #+END_SRC

    #+RESULTS:
    [[file:flatmap.png]]

*** Also known as ~bind~

    #+ATTR_REVEAL: :frag (appear)
    #+BEGIN_SRC haskell
    -- >>= is pronounced bind in Haskell. Wat!
    [1,2,3] >>= \a -> [a, a]
    -- Returns [1,1,2,2,3,3]

    Just 1 >>= \value -> Just (value+2)
    -- Returns Just 3

    Just 1 >>= \value -> Nothing
    -- Returns Nothing
    #+END_SRC

** Something used with For/Do

    #+BEGIN_SRC scala
    // Scala
    for {
      a <- Some(5)
      b <- Some(10)
    } yield a + b
    // Returns: Some(15)
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    do
      a <- Just 5
      b <- Just 10
      pure a + b
    -- Returns: Just 15
    #+END_SRC

** A way of composing certain types of functions

*** Normal Function Composition

    #+BEGIN_SRC c++
    // Java-ish
    Function<String, String> toUpperCase = ...;
    Function<String, String> trim = ...;
    Function<String, String> toUpperCaseAndtrim =
      toUpperCase.compose(trim);
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    def toUpperCase(input: String): String = ...
    def trim(input: String): String = ...
    def toUpperCaseAndTrim = toUpperCase.compose(trim)
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    toUpperCase :: String -> String
    trim :: String -> String
    toUpperCaseAndTrim = toUpperCase . trim
    #+END_SRC

*** Monadic Function Composition

    #+BEGIN_SRC c++
    // Java-ish
    Function<String, Promise<String>> toUpperCase = ...;
    Function<String, Promise<String>> trim  = ...;
    Function<String, Promise<String>> toUpperCaseAndTrim =
      toUpperCase.monadCompose(trim);
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    def toUpperCase(input: String): Promise[String] = ...
    def trim(input: String): Promise[String] = ...
    def toUpperCaseAndTrim =
      monadCompose(toUpperCaseService, trimService)
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    toUpperCase :: String -> Promise String
    trim :: String -> Promise String
    toUpperCaseAndTrim = toUpperCase >=> trim
    #+END_SRC

** Something to do with Sequential Computations?

    #+ATTR_REVEAL: :frag (appear)
    In most languages sequence is implied:

    #+ATTR_REVEAL: :frag (appear)
    #+BEGIN_SRC scala
    def main() = {
      // Executes doA then doB then doC and then returns
      val a = doA();
      val b = doB();
      val c = doC();
      a + b + c
    }
    #+END_SRC

*** But in some languages that isn't the case

    #+BEGIN_SRC haskell
    -- Executes in an arbitrary order as everything is lazy
    main =
      let a = doA
          b = doB
          c = doC
      in a + b + c
    #+END_SRC

*** Monads imply sequential computation

    #+BEGIN_SRC haskell
    -- Executes doA then doB then doC and then returns a result
    main = do
      a <- doA
      b <- doB
      c <- doC
      pure a + b + c
    #+END_SRC

** Something for managing side effects?

*** In some languages we can freely mix side-effects into normal code:

    #+BEGIN_SRC c++
    // Java-ish
    Integer add(Integer a, Integer b) {
        System.out.println("Hello World!");
        return a + b;
    }
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    def add(a: Int, b: Int): Int = {
      println("Hello World!")
      a + b
    }
    #+END_SRC

*** But not in all languages

    #+BEGIN_SRC haskell
    add :: Int -> Int -> Int
    add a b = do
      println "Hello World" -- ERROR! Doesn't compile
      a + b
    #+END_SRC

*** Instead we have to mark side effecting functions with a type

    #+BEGIN_SRC haskell
    add :: Int -> Int -> IO Int
    add a b = do
      println "Hello World" -- Compiles
      pure $ a + b
    #+END_SRC

*** ~flatMap~ lets us compose that type.

*** And we get ~flatMap~ from Monad!

* They're all Monads!

** No wonder they're so hard to learn...

** Something something Laws

  #+ATTR_REVEAL: :frag (appear)
  - There are rules defining how Monads must be implemented
  - Mostly it's about making them act in a sane way
  - They're outside the scope of this talk

* But wait! There's more!

** We need to talk about Maybe/List/Promise/Reader/Writer/State/IO

** Well...
  #+ATTR_REVEAL: :frag (appear)
  They are Monads!

  #+ATTR_REVEAL: :frag (appear)
  But that's the boring bit about them.

** Each of those types do something unique and valuable!
  #+ATTR_REVEAL: :frag (appear)
  They _enrich_ a type to give it extra functionality

  #+ATTR_REVEAL: :frag (appear)
  - ~Maybe~ adds ~null~
  - ~List~ adds multiple values
  - ~Promise~ adds asynchrony
  - ~Reader~ adds dependency injection
  - ~Writer~ adds logging
  - ~State~ adds arbitrary state
  - ~IO~ adds the ability to use the computer

  #+ATTR_REVEAL: :frag (appear)
  This has _nothing_ to do with Monads!

*** Example

    #+BEGIN_SRC c++
    // Java-ish
    Integer value;          // A boring integer
    List<Integer> values;   // An exciting bunch of integers!
    Future<Integer> value;  // An exciting asynchronous integer!
    #+END_SRC

    #+BEGIN_SRC scala
    // Scala
    value: Int;          // A boring integer
    values: List[Int];   // An exciting bunch of integers!
    value: Future[Int];  // An exciting asynchronous integer!
    #+END_SRC

    #+BEGIN_SRC haskell
    -- Haskell
    value :: Int         -- A boring integer
    values :: List Int   -- An exciting bunch of integers!
    value :: Async Int   -- An exciting asynchronous integer!
    #+END_SRC

** You have to learn each one individually, Monads won't help you here!

** Then why should I care if they're Monads?

*** They're all Generic types

   #+BEGIN_SRC c++
   // Java-ish
   Maybe<T> List<T> Promise<T> Reader<T>
   Writer<T> State<T> IO<T>
   #+END_SRC

   #+BEGIN_SRC scala
   // Scala
   Maybe[T] List[T] Promise[T] Reader[T]
   Writer[T] State[T] IO[T]
   #+END_SRC

   #+BEGIN_SRC haskell
   -- Haskell
   Maybe t, List t, Promise t, Reader t
   Writer t, State t, IO t
   #+END_SRC

*** We want to compose them...

*** Monads help us compose generic types!
    #+ATTR_REVEAL: :frag (appear)
    They're a *Design Pattern* for a specific type of composition.


* When I say "X is a Monad" I know:

    #+ATTR_REVEAL: :frag (appear)
    - This type is generic
    - This type enriches normal types with extra behavior
    - I can compose this type using flatMap/bind
    - I can compose this type using For/Do comprehension

** It's a design pattern!

*** Learn once, write everywhere!

* In Summary

  #+ATTR_REVEAL: :frag (appear)
  A Monad implies a whole bunch of things

  #+ATTR_REVEAL: :frag (appear)
  Try to learn them a little bit at a time!

  #+ATTR_REVEAL: :frag (appear)
  It's ok to be overwhelmed!

  #+ATTR_REVEAL: :frag (appear)
  This stuff takes time to learn.

* Extra Reading

- [[http://tomasp.net/academic/papers/monads/monads-programming.pdf][What we talk about when we talk about Monads]]

* Thanks!

*  Questions?

#+ATTR_HTML: :height 200%, :width 200%
[[./img/mindblown.gif]]
