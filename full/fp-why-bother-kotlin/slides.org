#+REVEAL_ROOT: ../../lib/reveal.js-4.1.1/
#+REVEAL_HLEVEL: 3
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h2>%a</h2>
#+REVEAL_TRANS: none

#+Title: FP: why bother?
#+Author: Jake Woods

#+OPTIONS: toc:nil
#+OPTIONS: num:nil

* What are we going to learn today?

** Nothing!
#+BEGIN_NOTES
- I'm not going to teach you anything.
- No sales pitches!
#+END_NOTES

* Instead! We're going to explore
#+BEGIN_NOTES
- Two things
#+END_NOTES

** How do functional programmers think about problems?
** Why do functional programmers bother with all this arcana?

* Caveat

** My experience is with *statically typed* FP
#+BEGIN_NOTES
- I.e. Haskell, Scala
- And now Kotlin
#+END_NOTES

** Dynamically typed FP is perfectly valid!
#+BEGIN_NOTES
- I.e. Clojure and... Ruby?
- I just don't do much of it so my examples are going to be biased
- Sorry!
#+END_NOTES

* Learning FP

** Purity
    #+BEGIN_SRC kotlin
    fun add(a: Int, b: Int): Int = a + b
    #+END_SRC

    #+ATTR_REVEAL: :frag (appear)
    #+BEGIN_SRC kotlin
    add(1, 1) // It returns 2! Purely!!
    #+END_SRC

** Recursion

    #+BEGIN_SRC kotlin
    fun fib(n: Int): Int =
      if(n == 0) {
        0
      } else {
        n + fib(n - 1)
      }
    }
    #+END_SRC

    #+ATTR_REVEAL: :frag (appear)
    #+BEGIN_SRC kotlin
    fib(4) // returns 10!
    #+END_SRC

** Currying

    #+BEGIN_SRC kotlin
    val add: (Int) -> (Int) -> Int = { a ->
      { b ->
        a + b
      }
    }
    #+END_SRC

    #+ATTR_REVEAL: :frag (appear)
    #+BEGIN_SRC kotlin
    val add1 = add(1)
    add1(2) // Returns 3! Cool!
    #+END_SRC

** List processing

    #+BEGIN_SRC kotlin
    // List processing:
    val numbers = listOf(1, 1, 1)

    numbers.map(i => i + 1).sum // Returns 6! Cool!
    #+END_SRC

* Back to reality

    #+BEGIN_SRC kotlin
    // Making decisions & causing side effects:
    fun makeLotsOfMoney(database: DbConnection) {
      val monies: Array<Float> = database.getMoney()

      var isThereEnoughMoney = true
      monies.forEach { money =>
        if(money < 1000000) {
          isThereEnoughMoney = false
        }
      }

      if(!isThereEnoughMoney && someBusinessThing() && !globalVariable) {
        doSomethingWithAWS()
      } else {
        globalVariable = true

        log.error(
          "Something bad happened but it's been happening for years so don't worry!"
        )

        doSomethingElseWithAWS()
      }
    }
    #+END_SRC

** They look completely different!
** How does this arcana relate to me?
** Why bother!?

* Why bother with anything?

** Programming
#+ATTR_REVEAL: :frag (appear)
   - Express problems to a computer
   - ... to make it do stuff
   - ... and maybe have some fun!

** Algorithms
#+ATTR_REVEAL: :frag (appear)
   - Express problems with math
   - ... to make it do new things it couldn't do before
   - ... to make it easier to solve problems

** Imperative programming
#+ATTR_REVEAL: :frag (appear)
   - Express problems in terms of imperative statements
   - ... to make computers do stuff
   - ... to make it easier to solve problems

** Object Oriented Programming
#+ATTR_REVEAL: :frag (appear)
   - Express problems in terms of objects
   - ... to make computers do stuff
   - ... to make it easier to solve problems

** Functional Programming
#+ATTR_REVEAL: :frag (appear)
   - Express problems in terms of functions
   - ... to make computers do stuff
   - ... to make it easier to solve problems

** It's not a competition
*** Functional programming *is not* morally better
*** But we enjoy it

* Why bother with FP?
** Because pure functions are gods gift to the mortal world.
** Because _we believe_ pure functions are gods gift to the mortal world.

** A totally legitimate description of pure functions

#+ATTR_REVEAL: :frag (appear)
  - Behavior *only* depends on parameters
  - Output *only* by returning a value
  - No user-detectable changes to the computer
    - No logs, no drawing things, no network access, nothing!

** Impure example

    #+BEGIN_SRC kotlin
    // Games in the datbase: ["Dwarf Fortress", "Duke Nukem Forever", "Prey", "E.T."]
    var gameDatabase: List<String> = gameServer.getGameDatabase

    // Impure
    fun removeBadGames(): Unit = {
      gameDatabase.remove("Duke Nukem Forever")
      gameDatabase.remove("E.T.")
    }

    removeBadGames()
    println(gameDatabase) // ["Dwarf Fortress", "Prey"]!
    #+END_SRC

** Pure Example

    #+BEGIN_SRC kotlin
    // Games in the datbase: ["Dwarf Fortress", "Duke Nukem Forever", "Prey", "E.T."]
    val gameDatabase = gameServer.getGameDatabase

    // Pure
    fun removeBadGames(games: List<String>): List<String> = {
      games
        .filter(_ ==  "Duke Nukem Forever")
        .filter(_ == "E.T.")
    }

    val goodGames = filterBadGames(gameDatabase)
    println(goodGames) // ["Dwarf Fortress", "Prey"]
    #+END_SRC

** Benefit - Testing

  #+BEGIN_SRC kotlin
  class RemoveBadGamesTest {
    @Test
    fun `do not remove Prey`() {
      val games = listOf("Prey")
      assertThat(removeBadGames(game)).isEqualTo(games)
    }

    @Test
    fun `remove Duke Nukem Forever`() {
      val games = listOf("Duke Nukem Forever")
      assertThat(removeBadGames(games)).isEmpty()
    }

    @Test
    fun `remove E.T.`() {
      val games = listOf("E.T.")
    }
  }
  #+END_SRC

** Benefit - Local Context
#+BEGIN_NOTES
- Everything you need to know is in one place.
- I _know_ for a fact that ~removeBadGames~ only uses an list of strings. *Nothing else*!
- I also know it's not going to do something unexpected!
#+END_NOTES

  #+BEGIN_SRC kotlin
    fun removeBadGames(games: List<String>): List<String> = {
      games
        .filter(_ ==  "Duke Nukem Forever")
        .filter(_ == "E.T.")
    }
  #+END_SRC

** Benefit - Honest Types
#+BEGIN_NOTES
- The static typing is actually telling the truth!
- This function is making a promise: Give me some strings and I will give you back some strings. *Nothing more, nothing less*
#+END_NOTES

  #+BEGIN_SRC kotlin
  fun removeBadGames(games: List<String>): List<String>
  #+END_SRC

#+ATTR_REVEAL: :frag (appear)
Pure functions are good friends: *They keep promises*

** Drawbacks
#+ATTR_REVEAL: :frag (appear)
Pure functions can't do anything!

** Things of note if you accept pure functions as your lord and saviour
#+ATTR_REVEAL: :frag (appear)
- Immutability becomes an obvious choice
- Objects start to look a lot less useful
- Since you've got lots of pure functions you need new techniques to manage them

* Lock the doors, it's _Monad_ time

#+ATTR_REVEAL: :frag (appear)
Just kidding

** How many of you had a fear response just then?

** The functional arcana is scary

** It looks impenetrable

** So why do we do it?

** Each scary buzzword is a _solution to a problem_
A solution that leverages pure functions

*** Immutability
Makes it possible to write pure functions

*** Functors
Makes it easier to apply functions to different types of containers

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC kotlin
fun add5(input: Int): Int = input + 5
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC kotlin
// add5 works on ints!
add5(10) // Returns 15
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC kotlin
// Functor lets us use it on lists!
List(1,2,3).map(add5) // returns List(6,7,8)
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC kotlin
// ?.let is "nullable map"
val value: Int? = 20
value?.let(add5) // Returns 25
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC kotlin
// And Future!
Future(1).map(add5) // Returns Future(6)
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
And lots of other stuff!

*** Applicatives
Combine functions in parallel

*** Monads
Sequence functions together

#+ATTR_REVEAL: :frag (appear)
This is used for IO in FP as IO is sequential!

#+ATTR_REVEAL: :frag (appear)
Monads are _not_ the core of FP and you can do FP without monads.

*** Fold
Makes it easier to apply functions to recursive data

*** Traverse
Makes it easier to apply functions to nested data structures

*** Typeclasses
Make it easier to pick which function to apply to some data

*** Free/Eff
- Compile functions into more functions
- Compose monads

** They're all solutions to _real world problems_

* But Jake - Why do _you_ bother!?

** I wanted to make *Video Games*!
   #+ATTR_REVEAL: :frag (appear)
   - So I learned Visual Basic 6
   - And used it to build crappy games

** Then I learned about _OOP_!
   #+ATTR_REVEAL: :frag (appear)
   - Lots of C++
   - Lots of objects
   - Everything was great!

** And then _it_ happened
   #+ATTR_REVEAL: :frag (appear)
   - I had a spaceship game with asteroids, bullets and rocks
   - And I asked the question:
   - "Where should the collide method go?"

** Boom!
   #+ATTR_REVEAL: :frag (appear)
   - None of the answers that I had at the time were satisfactory.
   - Double dispatch!? That's insane!
   - Let's change *everything*. That'll solve it!

** Then I learned about Haskell
   #+ATTR_REVEAL: :frag (appear)
   - I install ghc!
   - And I completely fail to become productive
   - But I learn about the concept of purity and I *love* it!

** A year passes
   #+ATTR_REVEAL: :frag (appear)
   - "Maybe I should give Haskell another go!"
   - I install ghc!
   - And I learn a _little bit_ more, apparently Monads are what the cool kids use
   - I fail to become productive again
   - Repeat for several years

** Scala? I think?
   #+ATTR_REVEAL: :frag (appear)
   - At some point I learn about Scala
   - I try to do FP in it
   - I fail
   - I go back to Haskell again
   - I fail

** I write FP at REA
   #+ATTR_REVEAL: :frag (appear)
   - My interview submission is the first Scala code I've ever written. It's fully functional though!
   - I get in somehow
   - *Suckers*
   - All that failing turns into a modest amount of knowledge!
   - Things happen, I finally build useful software with FP

** I leave for Cash
#+ATTR_REVEAL: :frag (appear)
- I get in somehow
- *Suckers*
- I get coerced into giving this talk on my second week
- And here I am

** That's my story!

* If you're just getting started
#+ATTR_REVEAL: :frag (appear)
- You *don't* need to start with monads/functors/applicatives.
- Just look for opportunities to write more pure functions
- See how they make you feel!

* Takeaways
#+ATTR_REVEAL: :frag (appear)
- Functional programmers want more pure functions
- Functional techniques help us use more pure functions

* Thank you!
Questions?
